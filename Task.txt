Сегодня мы напишем HTML редактор с графическим интерфейсом. В качестве библиотеки для создания графического интерфейса
воспользуемся Swing. А в качестве архитектурного каркаса нашего приложения будем использовать MVC модель.

 - Объяви класс Controller и класс View. Класс View должен быть унаследован от JFrame и реализовывать интерфейс ActionListener.
 - Добавь в класс Controller поля, отвечающие за представление View view и модель HTMLDocument document. Здесь и далее, классы,
которые мы не объявляли, но используем в коде скорее всего все находятся в библиотеке swing. Например,
класс HTMLDocument реализован в пакете javax.swing.text.html.
 - Добавь в класс Controller поле, которое будет отвечать за файл, который сейчас открыт в нашем редакторе (текущий файл) File currentFile.
 - Добавь конструктор класса Controller. Он должен принимать в качестве параметра представление и инициализировать соответствующее поле класса.
 - Добавь в Controller пустой метод main.
 - Добавь в класс View поле Controller controller.
 - Добавь в класс View сеттер и геттер для поля controller.
 - Добавь пустую реализацию метода, который объявлен в интерфейсе ActionListener.



 - Добавь в контроллер и представление по методу init(), пока без реализаций. Они будут отвечать за инициализацию контроллера и представления.
Теперь напишем в классе Controller метод main(). Он должен:
    1. Создавать объект представления.
    2. Создавать контроллер, используя представление.
    3. Устанавливать у представления контроллер.
    4. Инициализировать представление.
    5. Инициализировать контроллер. Контроллер должен инициализироваться после представления.
 - Добавь в контроллер метод exit(), он должен вызывать статический метод exit у класса System.
    1. Метод exit в классе Controller не должен быть статическим.
 - Добавь в представление метод exit(), он должен вызывать exit() у контроллера.



 Графический интерфейс будет представлять собой окно, в котором будет меню и панель с двумя вкладками.

 На первой вкладке будет располагаться текстовая панель, которая будет отрисовывать html страницу. На ней можно будет форматировать
 и редактировать текст страницы. На второй вкладке будет редактор, который будет отображать код html страницы,
 в нем будут видны все используемые html теги. В нем также можно будет менять текст страницы, добавлять
 и удалять различные теги.

 - Добавь и проинициализируй поля в классе представления:
    1.JTabbedPane tabbedPane - это будет панель с двумя вкладками.
    2.JTextPane htmlTextPane - это будет компонент для визуального редактирования html. Он будет размещен на первой вкладке.
    3.JEditorPane plainTextPane - это будет компонент для редактирования html в виде текста, он будет отображать код html (теги и их содержимое).
 - Добавь класс FrameListener в пакет listeners. Он должен:
    1.Быть унаследован от WindowAdapter.
    2.Иметь поле View view.
    3.В конструкторе принимать View и инициализировать внутреннее поле.
    4.Иметь переопределенный метод windowClosing(WindowEvent windowEvent), который должен вызывать exit() у представления.



  - Объяви методы initMenuBar() и initEditor() в классе View. Они будут отвечать за инициализацию меню и панелей редактора.
  - Объяви в представлении метод initGui(). Он будет инициализировать графический интерфейс. Вызови из него
  инициализацию меню initMenuBar(), инициализацию редактора initEditor() и метод pack(), реализацию которого мы
  унаследовали от класса JFrame. Разберись что делает метод pack().
  - Реализуй метод init() представления. Он должен:
    1.Вызывать инициализацию графического интерфейса initGui().
    2.Добавлять слушателя событий нашего окна. В качестве подписчика создай и используй объект класса FrameListener.
    В качестве метода для добавления подписчика используй подходящий метод из класса Window от которого наследуется и
    наш класс через классы JFrame и Frame.
    3.Показывать наше окно. Используй метод setVisible с правильным параметром.
 На этом этапе приложение при запуске должно показывать окно, которое можно растягивать, разворачивать, закрыть и т.д.



  - Объяви класс TabbedPaneChangeListener реализующий интерфейс ChangeListener в пакете listeners.
 Этот класс будет слушать и обрабатывать изменения состояния панели вкладок. Реализуй в этом классе:

    1. Конструктор, принимающий представление в виде параметра и сохраняющий во внутреннее поле view класса.
    2.Переопредели метод из интерфейса ChangeListener, он должен вызывать метод selectedTabChanged() у представления. Последнего метода еще нет, сделай для него заглушку.
  - Объяви класс ExceptionHandler. Это будет наш обработчик исключительных ситуаций, который ты в дальнейшем сможешь переопределить. Пока добавь в него статический метод log(Exception e), который будет выводить в консоль краткое описание проблемы (используй метод toString у переданного исключения).

