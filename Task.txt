Сегодня мы напишем HTML редактор с графическим интерфейсом. В качестве библиотеки для создания графического интерфейса
воспользуемся Swing. А в качестве архитектурного каркаса нашего приложения будем использовать MVC модель.

 - Объяви класс Controller и класс View. Класс View должен быть унаследован от JFrame и реализовывать интерфейс ActionListener.
 - Добавь в класс Controller поля, отвечающие за представление View view и модель HTMLDocument document. Здесь и далее, классы,
которые мы не объявляли, но используем в коде скорее всего все находятся в библиотеке swing. Например,
класс HTMLDocument реализован в пакете javax.swing.text.html.
 - Добавь в класс Controller поле, которое будет отвечать за файл, который сейчас открыт в нашем редакторе (текущий файл) File currentFile.
 - Добавь конструктор класса Controller. Он должен принимать в качестве параметра представление и инициализировать соответствующее поле класса.
 - Добавь в Controller пустой метод main.
 - Добавь в класс View поле Controller controller.
 - Добавь в класс View сеттер и геттер для поля controller.
 - Добавь пустую реализацию метода, который объявлен в интерфейсе ActionListener.



 - Добавь в контроллер и представление по методу init(), пока без реализаций. Они будут отвечать за инициализацию контроллера и представления.
Теперь напишем в классе Controller метод main(). Он должен:
    1. Создавать объект представления.
    2. Создавать контроллер, используя представление.
    3. Устанавливать у представления контроллер.
    4. Инициализировать представление.
    5. Инициализировать контроллер. Контроллер должен инициализироваться после представления.
 - Добавь в контроллер метод exit(), он должен вызывать статический метод exit у класса System.
    1. Метод exit в классе Controller не должен быть статическим.
 - Добавь в представление метод exit(), он должен вызывать exit() у контроллера.



 Графический интерфейс будет представлять собой окно, в котором будет меню и панель с двумя вкладками.

 На первой вкладке будет располагаться текстовая панель, которая будет отрисовывать html страницу. На ней можно будет форматировать
 и редактировать текст страницы. На второй вкладке будет редактор, который будет отображать код html страницы,
 в нем будут видны все используемые html теги. В нем также можно будет менять текст страницы, добавлять
 и удалять различные теги.

 - Добавь и проинициализируй поля в классе представления:
    1.JTabbedPane tabbedPane - это будет панель с двумя вкладками.
    2.JTextPane htmlTextPane - это будет компонент для визуального редактирования html. Он будет размещен на первой вкладке.
    3.JEditorPane plainTextPane - это будет компонент для редактирования html в виде текста, он будет отображать код html (теги и их содержимое).
 - Добавь класс FrameListener в пакет listeners. Он должен:
    1.Быть унаследован от WindowAdapter.
    2.Иметь поле View view.
    3.В конструкторе принимать View и инициализировать внутреннее поле.
    4.Иметь переопределенный метод windowClosing(WindowEvent windowEvent), который должен вызывать exit() у представления.



  - Объяви методы initMenuBar() и initEditor() в классе View. Они будут отвечать за инициализацию меню и панелей редактора.
  - Объяви в представлении метод initGui(). Он будет инициализировать графический интерфейс. Вызови из него
  инициализацию меню initMenuBar(), инициализацию редактора initEditor() и метод pack(), реализацию которого мы
  унаследовали от класса JFrame. Разберись что делает метод pack().
  - Реализуй метод init() представления. Он должен:
    1.Вызывать инициализацию графического интерфейса initGui().
    2.Добавлять слушателя событий нашего окна. В качестве подписчика создай и используй объект класса FrameListener.
    В качестве метода для добавления подписчика используй подходящий метод из класса Window от которого наследуется и
    наш класс через классы JFrame и Frame.
    3.Показывать наше окно. Используй метод setVisible с правильным параметром.
 На этом этапе приложение при запуске должно показывать окно, которое можно растягивать, разворачивать, закрыть и т.д.



  - Объяви класс TabbedPaneChangeListener реализующий интерфейс ChangeListener в пакете listeners.
 Этот класс будет слушать и обрабатывать изменения состояния панели вкладок. Реализуй в этом классе:

    1. Конструктор, принимающий представление в виде параметра и сохраняющий во внутреннее поле view класса.
    2.Переопредели метод из интерфейса ChangeListener, он должен вызывать метод selectedTabChanged() у представления.
    Последнего метода еще нет, сделай для него заглушку.
  - Объяви класс ExceptionHandler. Это будет наш обработчик исключительных ситуаций, который ты в дальнейшем сможешь
  переопределить. Пока добавь в него статический метод log(Exception e), который будет выводить в консоль краткое
  описание проблемы (используй метод toString у переданного исключения).



   - Реализуй метод инициализации панелей редактора initEditor(). Он должен:

    1.Устанавливать значение "text/html" в качестве типа контента для компонента htmlTextPane. Найди и используй подходящий метод.
    2.Создавать новый локальный компонент JScrollPane на базе htmlTextPane.
    3.Добавлять вкладку в панель tabbedPane с именем "HTML" и компонентом из предыдущего пункта.
    4.Создавать новый локальный компонент JScrollPane на базе plainTextPane.
    5.Добавлять еще одну вкладку в tabbedPane с именем "Текст" и компонентом из предыдущего пункта.
    6.Устанавливать предпочтительный размер панели tabbedPane.
    7.Создавать объект класса TabbedPaneChangeListener и устанавливать его в качестве слушателя изменений в tabbedPane.
    8.Добавлять по центру панели контента текущего фрейма нашу панель с вкладками.
  Получить панель контента текущего фрейма можно с помощью метода getContentPane(), его реализация унаследовалась от
  JFrame. После запуска приложения можно будет увидеть текущие результаты: две независимые закладки (HTML и Текст),
  в каждой из которых можно набирать свой текст.



Добавь класс MenuHelper. Это будет вспомогательный класс для инициализации и настройки меню. У меню будет следующая структура:

    Файл

- Новый
- Открыть
- Сохранить
- Сохранить как…
- Выход

    Редактировать

- Отменить
- Вернуть
- Вырезать
- Копировать
- Вставить

    Стиль

- Полужирный
- Подчеркнутый
- Курсив
- Подстрочный знак
- Надстрочный знак
- Зачеркнутый

    Выравнивание

- По левому краю
- По центру
- По правому краю

    Цвет

- Красный
- Оранжевый
- Желтый
- Зеленый
- Синий
- Голубой
- Пурпурный
- Черный

    Шрифт

- Шрифт
  * SansSerif, Serif, Monospaced, Dialog, DialogInput
- Размер шрифта
  * 6, 8, 10, 12, 14, 16, 20, 24, 32, 36, 48, 72

    Помощь

    О программе


 - Реализуй в MenuHelper статический метод JMenuItem addMenuItem(JMenu parent, String text, ActionListener actionListener),
  где parent — меню в которое мы добавляем пункт, text — текст добавляемого пункта, actionListener — слушатель
  действий добавляемого пункта меню. Он должен:

    1.Создавать новый пункт меню JMenuItem, используя text.
    2.Устанавливать этому пункту слушателя действий с помощью метода addActionListener().
    3.Добавлять в parent созданный пункт меню.
    4.Возвращать созданный пункт меню.

 - Реализуй статический метод JMenuItem addMenuItem(JMenu parent, Action action).
 Этот метод аналогичен предыдущему, но в качестве параметра принимает действие action, которое необходимо выполнить
 при выборе пункта меню.

  !Подсказка: при создании JMenuItem передай в конструктор action.
  Разберись откуда возьмется имя пункта меню, если его не устанавливать дополнительно.

 - Реализуй статический метод JMenuItem addMenuItem(JMenu parent, String text, Action action),
 который добавляет в parent новый пункт меню с текстом text и действием action при выборе этого метода.
 При реализации используй вызов метода из предыдущего пункта.

 - Добавь в MenuHelper заглушки для следующих статический методов:

    1.void initHelpMenu(View view, JMenuBar menuBar) — инициализация меню помощи.
    2.void initFontMenu(View view, JMenuBar menuBar) — инициализация меню выбора шрифта.
    3.void initColorMenu(View view, JMenuBar menuBar) — инициализация меню выбора цвета.
    4.void initAlignMenu(View view, JMenuBar menuBar) — инициализация меню выравнивания.
    5.void initStyleMenu(View view, JMenuBar menuBar) — инициализация меню выбора стиля текста.
    6.void initEditMenu(View view, JMenuBar menuBar) — инициализация меню редактирования текста.
    7.void initFileMenu(View view, JMenuBar menuBar) — инициализация меню Файл.



Пришло время добавить все необходимые пункты меню и написать классы действий, выполняемые при нажатии. Это довольно
трудоемкая и рутинная работа, а ты отличный ученик и не хотелось бы тебя огорчать.
Поэтому, в качестве бонуса ты получаешь готовый класс MenuHelper! А ты:
8.1. Напиши в пакете actions заглушки для следующих классов:
8.1.1. Класс отмены действия UndoAction. Он должен наследоваться от AbstractAction и
        содержать конструктор UndoAction(View view).
8.1.2. Класс возврата действия RedoAction. Требования аналогичны требованиям к UndoAction.
8.1.3. Класс StrikeThroughAction, который отвечает за стиль текста «Зачеркнутый«. Унаследуй
        его от StyledEditorKit.StyledTextAction.
8.1.4. Класс SubscriptAction, который отвечает за стиль текста «Подстрочный знак«. Его также унаследуй
        его от StyledEditorKit.StyledTextAction.
8.1.5. Класс SuperscriptAction. Он будет отвечать за стиль «Надстрочный знак«. Добавь ему правильный родительский класс.
8.2. Напиши в пакете listeners заглушки для классов:
8.2.1. UndoMenuListener, он должен реализовывать интерфейс MenuListener и иметь конструктор
        UndoMenuListener(View view, JMenuItem undoMenuItem, JMenuItem redoMenuItem). Чем он будет заниматься узнаешь чуть позже.
8.2.2. TextEditMenuListener. Этот класс также должен реализовывать интерфейс MenuListener.
Добавь ему конструктор TextEditMenuListener(View view). В следующих заданиях мы рассмотрим его детальнее.



9.1. Реализуй метод initMenuBar(). Он должен:
9.1.1. Создавать новый объект типа JMenuBar. Это и будет наша панель меню.
9.1.2. С помощью MenuHelper инициализировать меню в следующем порядке: Файл, Редактировать, Стиль, Выравнивание, Цвет, Шрифт и Помощь.
9.1.3. Добавлять в верхнюю часть панели контента текущего фрейма нашу панель меню, аналогично тому, как это мы делали с панелью вкладок.
9.2. Добавь конструктор класса View. Он должен устанавливать внешний вид и поведение (look and feel) нашего приложения такими же, как это определено в системе.
Конструктор не должен кидать исключений, только логировать их с помощью ExceptionHandler.

Подсказа: для реализации задания используй класс UIManager.

Запусти приложение, теперь ты должен видеть панель с меню вверху окна. Некоторые из пунктов
меню (например: Вырезать, Копировать, Вставить, Стиль (частично), Выравнивание, Цвет, Шрифт) должны
уже работать. Убедись, что все работает и только затем продолжи разработку.



Наш редактор будет поддерживать механизм отмены/возврата (undo/redo) действий в
редакторе.
Реализуй класс UndoMenuListener. Этот слушатель будет следить за меню, а если конкретнее, то за моментом, когда меню
редактирования будет выбрано пользователем. В этот момент он будет запрашивать у представления можем ли мы сейчас
отменить или вернуть какое-то действие, и в зависимости от этого делать доступными или не
доступными пункты меню «Отменить» и «Вернуть«.
10.1. Добавь в класс UndoMenuListener следующие поля:
10.1.1. Представление View view.
10.1.2. Пункт меню «Отменить» JMenuItem undoMenuItem.
10.1.3. Пункт меню «Вернуть» JMenuItem redoMenuItem.
10.2. Реализуй конструктор UndoMenuListener(View view, JMenuItem undoMenuItem, JMenuItem redoMenuItem), он должен инициализировать поля класса.
10.3. Реализуй метод menuSelected(MenuEvent menuEvent). Он будет вызываться перед показом меню. Он должен:
10.3.1. Спрашивать у представления можем ли мы отменить действие с помощью метода boolean canUndo().
    Пока у представления нет такого метода, поэтому добавь заглушку, которая всегда возвращает false.
10.3.2. Делать доступным или не доступным пункт меню undoMenuItem в зависимости от того, что нам вернуло представление.

Подсказка: используй метод setEnabled().

10.3.3. Аналогично поступи и для пункта меню redoMenuItem, добавив метод-заглушку canRedo() в представление.
Запусти программу и убедись, что пункты меню Отменить и Вернуть недоступны.



11.1. Добавь в представление поле UndoManager undoManager.
    Разберись для чего используется этот класс. Проинициализируй поле класса новым объектом.
11.2. Добавь класс UndoListener реализующий интерфейс UndoableEditListener в пакет listeners.
    Этот класс будет следить за правками, которые можно отменить или вернуть.
11.3. Добавь в класс UndoListener:
11.3.1. Поле UndoManager undoManager.
11.3.2. Конструктор, который принимает UndoManager и инициализирует поле класса.
11.3.3. Метод undoableEditHappened(UndoableEditEvent e). Он должен из переданного события получать правку и
    добавлять ее в undoManager.
11.4. Добавь в представление поле UndoListener undoListener, проинициализируй его используя undoManager.
11.5. Добавь в представление методы:
11.5.1. void undo() — отменяет последнее действие. Реализуй его используя undoManager.
Метод не должен кидать исключений, логируй их.
11.5.2. void redo() — возвращает ранее отмененное действие. Реализуй его по аналогии с предыдущим пунктом.
11.5.3. Реализуй методы boolean canUndo() и boolean canRedo() используя undoManager.
11.5.4. Реализуй геттер для undoListener.
11.5.5. Добавь и реализуй метод void resetUndo(), который должен сбрасывать все правки в менеджере undoManager.



12.1. Напиши реализацию класса RedoAction:
12.1.1. Добавь в класс поле View. Добавь его инициализацию в конструкторе.
12.1.2. Реализуй метод actionPerformed(ActionEvent actionEvent), он должен вызывать метод redo() у представления.
12.2. Напиши реализацию класса UndoAction по аналогии с RedoAction.
12.3. Изучи реализацию класса StrikeThroughAction, которую ты получил вместе с заданием и реализуй
    аналогичным образом классы:
12.3.1. SubscriptAction
12.3.2. SuperscriptAction
Запусти программу и убедись, что пункты меню Подстрочный знак, Надстрочный знак и Зачеркнутый работают.
Пункты, отвечающие за отмену и возврат действия пока не подключены к контроллеру и мы не сможем их проверить.



Реализуем класс TextEditMenuListener в пакет listeners. Этот класс будет работать аналогично классу
UndoMenuListener только для других пунктов меню. Пункты меню, отвечающие за стиль, шрифт, цвет и т.д.
должны быть доступны только тогда, когда в нашем редакторе выбрана первая вкладка.
13.1. Добавь в представление метод boolean isHtmlTabSelected(). Он должен возвращать true, если выбрана вкладка,
    отображающая html в панели вкладок (подсказка: ее индекс 0).
13.2. Добавь в класс TextEditMenuListener поле View, проинициализируй его в конструкторе класса.
13.3. В классе TextEditMenuListener переопредели метод menuSelected(MenuEvent menuEvent). Он должен:
13.3.1. Из переданного параметра получать объект, над которым было совершено действие. В нашем случае это
    будет объект с типом JMenu.
13.3.2. У полученного меню получать список компонентов (пунктов меню).
13.3.3. Для каждого пункта меню вызывать метод setEnabled, передав в качестве параметра результат вызова метода
    isHtmlTabSelected() из представления. Запусти приложение и убедись, что пункты меню стиль, выравнивание,
    цвет и шрифт доступны только, когда активна закладка HTML и не доступны для закладки Текст.



14.1. Добавь в класс представления метод selectHtmlTab(). Он должен:
14.1.1. Выбирать html вкладку (переключаться на нее).
14.1.2. Сбрасывать все правки с помощью метода, который ты реализовал ранее.
14.2. Добавь в класс контроллера геттер для модели, в нашем случае это поле document.
14.3. Добавь в представление метод update(), который должен получать документ у контроллера и
    устанавливать его в панель редактирования htmlTextPane.
14.4. Добавь в представление метод showAbout(), который должен показывать диалоговое окно с информацией о программе.
    Информацию придумай сам, а вот тип сообщения должен быть JOptionPane.INFORMATION_MESSAGE.



Добавь в контроллер метод resetDocument(), который будет сбрасывать текущий документ. Он должен:
15.1. Удалять у текущего документа document слушателя правок которые можно отменить/вернуть (найди подходящий
    для этого метод, унаследованный от AbstractDocument). Слушателя нужно запросить у представления (метод getUndoListener()).
Не забудь проверить, что текущий документ существует (не null).
15.2. Создавать новый документ по умолчанию и присваивать его полю document.

Подсказка: воспользуйся подходящим методом класса HTMLEditorKit.

15.3. Добавлять новому документу слушателя правок.
15.4. Вызывать у представления метод update().



Добавь метод setPlainText(String text) в контроллер. Он будет записывать переданный текст с html тегами в
документ document. При его реализации:
16.1. Сбрось документ.
16.2. Создай новый реадер StringReader на базе переданного текста.
16.3. Вызови метод read() из класса HTMLEditorKit, который вычитает данные из реадера в
документ document.
16.4. Проследи, чтобы метод не кидал исключения. Их необходимо просто логировать.



Добавь метод String getPlainText() в контроллер. Он должен получать текст из документа со всеми html тегами.
17.1. Создай объект StringWriter.
17.2. Перепиши все содержимое из документа document в созданный объект с помощью
метода write класса HTMLEditorKit.
17.3. Как обычно, метод не должен кидать исключений.



Реализуй метод selectedTabChanged() представления. Этот метод вызывается, когда произошла смена выбранной вкладки. Итак:
18.1. Метод должен проверить, какая вкладка сейчас оказалась выбранной.
18.2. Если выбрана вкладка с индексом 0 (html вкладка), значит нам нужно получить текст из plainTextPane
    и установить его в контроллер с помощью метода setPlainText.
18.3. Если выбрана вкладка с индексом 1 (вкладка с html текстом), то необходимо получить текст у контроллера с
    помощью метода getPlainText() и установить его в панель plainTextPane.
18.4. Сбросить правки (вызвать метод resetUndo представления).



Реализуем метод actionPerformed(ActionEvent actionEvent) у представления, этот метод наследуется от интерфейса
    ActionListener и будет вызваться при выборе пунктов меню, у которых наше представление указано в виде слушателя событий.
19.1. Получи из события команду с помощью метода getActionCommand(). Это будет обычная строка. По этой строке ты
    можешь понять какой пункт меню создал данное событие.
19.2. Если это команда «Новый«, вызови у контроллера метод createNewDocument(). В этом пункте и далее,
    если необходимого метода в контроллере еще нет — создай заглушки.
19.3. Если это команда «Открыть«, вызови метод openDocument().
19.4. Если «Сохранить«, то вызови saveDocument().
19.5. Если «Сохранить как…» — saveDocumentAs().
19.6. Если «Выход» — exit().
19.7. Если «О программе«, то вызови метод showAbout() у представления.
Проверь, что заработали пункты меню Выход и О программе.



20.1. Реализуй метод создания нового документа createNewDocument() в контроллере. Он должен:
20.1.1. Выбирать html вкладку у представления.
20.1.2. Сбрасывать текущий документ.
20.1.3. Устанавливать новый заголовок окна, например: «HTML редактор«. Воспользуйся методом setTitle(),
    который унаследован в нашем представлении.
20.1.4. Сбрасывать правки в Undo менеджере. Используй метод resetUndo представления.
20.1.5. Обнулить переменную currentFile.
20.2. Реализуй метод инициализации init() контроллера. Он должен просто вызывать метод создания нового документа.
Проверь работу пункта меню Новый.



Для открытия или сохранения файла мы будем использовать JFileChooser из библиотеки swing.
Объекты этого типа поддерживают фильтры, унаследованные от FileFilter. Сейчас мы напишем свой фильтр:
21.1. Создай публичный класс HTMLFileFilter унаследованный от FileFilter.
21.2. Мы хотим, чтобы окно выбора файла отображало только html/htm файлы или папки.
Переопредели метод accept(File file), чтобы он возвращал true, если переданный файл директория
    или содержит в конце имени «.html» или «.htm» без учета регистра.
21.3. Чтобы в окне выбора файла в описании доступных типов файлов отображался текст «HTML и HTM файлы»
    переопредели соответствующим образом метод getDescription().



Реализуем в контроллере метод для сохранения файла под новым именем saveDocumentAs().
Реализация должна:
22.1. Переключать представление на html вкладку.
22.2. Создавать новый объект для выбора файла JFileChooser.
22.3. Устанавливать ему в качестве фильтра объект HTMLFileFilter.
22.4. Показывать диалоговое окно «Save File» для выбора файла.
22.5. Если пользователь подтвердит выбор файла:
22.5.1. Сохранять выбранный файл в поле currentFile.
22.5.2. Устанавливать имя файла в качестве заголовка окна представления.
22.5.3. Создавать FileWriter на базе currentFile.
22.5.4. Переписывать данные из документа document в объекта FileWriter-а аналогично тому,
    как мы это делали в методе getPlainText().
22.6. Метод не должен кидать исключения.
Проверь работу пункта меню Сохранить как…



23.1. Напишем метод для сохранения открытого файла saveDocument(). Метод должен работать также, как
saveDocumentAs(), но не запрашивать файл у пользователя, а использовать currentFile. Если currentFile равен null,
то вызывать метод saveDocumentAs().
23.2. Пришло время реализовать метод openDocument(). Метод должен работать аналогично методу saveDocumentAs(),
 той части, которая отвечает за выбор файла.

Подсказка: Обрати внимание на имя метода для показа диалогового окна.

Когда файл выбран, необходимо:
23.2.1. Установить новое значение currentFile.
23.2.2. Сбросить документ.
23.2.3. Установить имя файла в заголовок у представления.
23.2.4. Создать FileReader, используя currentFile.
23.2.5. Вычитать данные из FileReader-а в документ document с помощью объекта класса HTMLEditorKit.
23.2.6. Сбросить правки (вызвать метод resetUndo представления).
23.2.7. Если возникнут исключения — залогируй их и не пробрасывай наружу.
Проверь работу пунктов меню Сохранить и Открыть.




Твой html редактор готов!
Ты научился:
— Создавать приложения с графическим интерфейсом.
— Работать с диалоговыми окнами.
— Пользоваться классами из библиотеки Swing.
— Реализовывать взаимодействие компонентов программы с помощью событий, слушателей, действий.
— Усилил свои знания в области MVC.

Что можно улучшить в разработанном редакторе:
— Добавить панель инструментов, повторяющую функционал меню.
— Добавить подсветку html тегов на второй вкладке.
— Добавить возможность загрузки документа из Интернет.
— Расширить возможности редактора (вставка картинки, ссылки и т.д.)

Поздравляю, так держать!